name: Deploy Application

on:
  push:
    branches:
      - master # Replace with the relevant branch

jobs:
  deploy:
    runs-on: [self-hosted]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Set up Docker Buildx to enable building and pushing multi-platform images
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Login to DockerHub (or any other registry you're using)
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push frontend Docker image
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/frontend:v1

    # Build and push backend Docker image
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/backend:v1

    # Pull the images from DockerHub
    - name: Pull images from DockerHub
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:v1
        docker pull ${{ secrets.DOCKER_USERNAME }}/backend:v1
        docker pull mongo:latest

    # Create the Docker volume for MongoDB data
    - name: Create Docker volume
      run: docker volume create mongo-db

    # Create the custom Docker network
    - name: Create Docker network
      run: docker network create network-backend

    # Start MongoDB container with environment variables
    - name: Start MongoDB container
      run: |
        docker run -itd --name mongo --network network-backend -e MONGO_INITDB_ROOT_USERNAME=mongoUser -e MONGO_INITDB_ROOT_PASSWORD=mongoPassword -v mongo-db:/data/db -p 27017:27017 mongo:latest

    # Add wait time or waiting mechanism for MongoDB to be ready
    - name: Wait for MongoDB to be ready
      run: |
        echo "Waiting for MongoDB to be ready..."
        sleep 30 # You can use a script or tool like `wait-for-it` here

    # Start the frontend container
    - name: Start frontend container
      run: docker run -itd --name web-app --network network-backend -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/frontend:v1

    # Start the backend container
    - name: Start backend container
      run: docker run -itd --name backend-app --network network-backend -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/backend:v1
